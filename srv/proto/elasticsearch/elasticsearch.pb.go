// Code generated by protoc-gen-go.
// source: github.com/Rakanixu/elasticsearch/srv/proto/elasticsearch/elasticsearch.proto
// DO NOT EDIT!

/*
Package go_micro_srv_elasticsearch is a generated protocol buffer package.

It is generated from these files:
	github.com/Rakanixu/elasticsearch/srv/proto/elasticsearch/elasticsearch.proto

It has these top-level messages:
	DocRef
	CreateRequest
	CreateResponse
	ReadRequest
	ReadResponse
	UpdateRequest
	UpdateResponse
	DeleteRequest
	DeleteResponse
	SearchRequest
	SearchResponse
	QueryRequest
	QueryResponse
*/
package go_micro_srv_elasticsearch

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type DocRef struct {
	Index string `protobuf:"bytes,1,opt,name=index" json:"index,omitempty"`
	Type  string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Id    string `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
}

func (m *DocRef) Reset()                    { *m = DocRef{} }
func (m *DocRef) String() string            { return proto.CompactTextString(m) }
func (*DocRef) ProtoMessage()               {}
func (*DocRef) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type CreateRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index" json:"index,omitempty"`
	Type  string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Id    string `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	Data  string `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *CreateRequest) Reset()                    { *m = CreateRequest{} }
func (m *CreateRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateRequest) ProtoMessage()               {}
func (*CreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type CreateResponse struct {
}

func (m *CreateResponse) Reset()                    { *m = CreateResponse{} }
func (m *CreateResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateResponse) ProtoMessage()               {}
func (*CreateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type ReadRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index" json:"index,omitempty"`
	Type  string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Id    string `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
}

func (m *ReadRequest) Reset()                    { *m = ReadRequest{} }
func (m *ReadRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadRequest) ProtoMessage()               {}
func (*ReadRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type ReadResponse struct {
	Result string `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *ReadResponse) Reset()                    { *m = ReadResponse{} }
func (m *ReadResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadResponse) ProtoMessage()               {}
func (*ReadResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type UpdateRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index" json:"index,omitempty"`
	Type  string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Id    string `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	Data  string `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
}

func (m *UpdateRequest) Reset()                    { *m = UpdateRequest{} }
func (m *UpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateRequest) ProtoMessage()               {}
func (*UpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type UpdateResponse struct {
}

func (m *UpdateResponse) Reset()                    { *m = UpdateResponse{} }
func (m *UpdateResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateResponse) ProtoMessage()               {}
func (*UpdateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type DeleteRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index" json:"index,omitempty"`
	Type  string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Id    string `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteRequest) Reset()                    { *m = DeleteRequest{} }
func (m *DeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteRequest) ProtoMessage()               {}
func (*DeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type DeleteResponse struct {
}

func (m *DeleteResponse) Reset()                    { *m = DeleteResponse{} }
func (m *DeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteResponse) ProtoMessage()               {}
func (*DeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type SearchRequest struct {
	Index  string `protobuf:"bytes,1,opt,name=index" json:"index,omitempty"`
	Type   string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Query  string `protobuf:"bytes,3,opt,name=query" json:"query,omitempty"`
	Limit  int64  `protobuf:"varint,4,opt,name=limit" json:"limit,omitempty"`
	Offset int64  `protobuf:"varint,5,opt,name=offset" json:"offset,omitempty"`
}

func (m *SearchRequest) Reset()                    { *m = SearchRequest{} }
func (m *SearchRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchRequest) ProtoMessage()               {}
func (*SearchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type SearchResponse struct {
	Result string `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *SearchResponse) Reset()                    { *m = SearchResponse{} }
func (m *SearchResponse) String() string            { return proto.CompactTextString(m) }
func (*SearchResponse) ProtoMessage()               {}
func (*SearchResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type QueryRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index" json:"index,omitempty"`
	Type  string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Query string `protobuf:"bytes,3,opt,name=query" json:"query,omitempty"`
}

func (m *QueryRequest) Reset()                    { *m = QueryRequest{} }
func (m *QueryRequest) String() string            { return proto.CompactTextString(m) }
func (*QueryRequest) ProtoMessage()               {}
func (*QueryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type QueryResponse struct {
	Result string `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *QueryResponse) Reset()                    { *m = QueryResponse{} }
func (m *QueryResponse) String() string            { return proto.CompactTextString(m) }
func (*QueryResponse) ProtoMessage()               {}
func (*QueryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func init() {
	proto.RegisterType((*DocRef)(nil), "go.micro.srv.elasticsearch.DocRef")
	proto.RegisterType((*CreateRequest)(nil), "go.micro.srv.elasticsearch.CreateRequest")
	proto.RegisterType((*CreateResponse)(nil), "go.micro.srv.elasticsearch.CreateResponse")
	proto.RegisterType((*ReadRequest)(nil), "go.micro.srv.elasticsearch.ReadRequest")
	proto.RegisterType((*ReadResponse)(nil), "go.micro.srv.elasticsearch.ReadResponse")
	proto.RegisterType((*UpdateRequest)(nil), "go.micro.srv.elasticsearch.UpdateRequest")
	proto.RegisterType((*UpdateResponse)(nil), "go.micro.srv.elasticsearch.UpdateResponse")
	proto.RegisterType((*DeleteRequest)(nil), "go.micro.srv.elasticsearch.DeleteRequest")
	proto.RegisterType((*DeleteResponse)(nil), "go.micro.srv.elasticsearch.DeleteResponse")
	proto.RegisterType((*SearchRequest)(nil), "go.micro.srv.elasticsearch.SearchRequest")
	proto.RegisterType((*SearchResponse)(nil), "go.micro.srv.elasticsearch.SearchResponse")
	proto.RegisterType((*QueryRequest)(nil), "go.micro.srv.elasticsearch.QueryRequest")
	proto.RegisterType((*QueryResponse)(nil), "go.micro.srv.elasticsearch.QueryResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Elasticsearch service

type ElasticsearchClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*CreateResponse, error)
	Read(ctx context.Context, in *ReadRequest, opts ...client.CallOption) (*ReadResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...client.CallOption) (*UpdateResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error)
	Search(ctx context.Context, in *SearchRequest, opts ...client.CallOption) (*SearchResponse, error)
	Query(ctx context.Context, in *QueryRequest, opts ...client.CallOption) (*QueryResponse, error)
}

type elasticsearchClient struct {
	c           client.Client
	serviceName string
}

func NewElasticsearchClient(serviceName string, c client.Client) ElasticsearchClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "go.micro.srv.elasticsearch"
	}
	return &elasticsearchClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *elasticsearchClient) Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*CreateResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Elasticsearch.Create", in)
	out := new(CreateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elasticsearchClient) Read(ctx context.Context, in *ReadRequest, opts ...client.CallOption) (*ReadResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Elasticsearch.Read", in)
	out := new(ReadResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elasticsearchClient) Update(ctx context.Context, in *UpdateRequest, opts ...client.CallOption) (*UpdateResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Elasticsearch.Update", in)
	out := new(UpdateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elasticsearchClient) Delete(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Elasticsearch.Delete", in)
	out := new(DeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elasticsearchClient) Search(ctx context.Context, in *SearchRequest, opts ...client.CallOption) (*SearchResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Elasticsearch.Search", in)
	out := new(SearchResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elasticsearchClient) Query(ctx context.Context, in *QueryRequest, opts ...client.CallOption) (*QueryResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Elasticsearch.Query", in)
	out := new(QueryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Elasticsearch service

type ElasticsearchHandler interface {
	Create(context.Context, *CreateRequest, *CreateResponse) error
	Read(context.Context, *ReadRequest, *ReadResponse) error
	Update(context.Context, *UpdateRequest, *UpdateResponse) error
	Delete(context.Context, *DeleteRequest, *DeleteResponse) error
	Search(context.Context, *SearchRequest, *SearchResponse) error
	Query(context.Context, *QueryRequest, *QueryResponse) error
}

func RegisterElasticsearchHandler(s server.Server, hdlr ElasticsearchHandler) {
	s.Handle(s.NewHandler(&Elasticsearch{hdlr}))
}

type Elasticsearch struct {
	ElasticsearchHandler
}

func (h *Elasticsearch) Create(ctx context.Context, in *CreateRequest, out *CreateResponse) error {
	return h.ElasticsearchHandler.Create(ctx, in, out)
}

func (h *Elasticsearch) Read(ctx context.Context, in *ReadRequest, out *ReadResponse) error {
	return h.ElasticsearchHandler.Read(ctx, in, out)
}

func (h *Elasticsearch) Update(ctx context.Context, in *UpdateRequest, out *UpdateResponse) error {
	return h.ElasticsearchHandler.Update(ctx, in, out)
}

func (h *Elasticsearch) Delete(ctx context.Context, in *DeleteRequest, out *DeleteResponse) error {
	return h.ElasticsearchHandler.Delete(ctx, in, out)
}

func (h *Elasticsearch) Search(ctx context.Context, in *SearchRequest, out *SearchResponse) error {
	return h.ElasticsearchHandler.Search(ctx, in, out)
}

func (h *Elasticsearch) Query(ctx context.Context, in *QueryRequest, out *QueryResponse) error {
	return h.ElasticsearchHandler.Query(ctx, in, out)
}

var fileDescriptor0 = []byte{
	// 426 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x94, 0x4f, 0x6b, 0xdb, 0x30,
	0x18, 0xc6, 0x97, 0xc4, 0x31, 0xec, 0x5d, 0x1c, 0x86, 0x18, 0xc3, 0xf8, 0x34, 0x7c, 0x58, 0x92,
	0x1d, 0x6c, 0xd8, 0xbe, 0xc1, 0x96, 0x31, 0x76, 0xd8, 0x60, 0x1e, 0x3d, 0x95, 0x16, 0x14, 0x5b,
	0x49, 0x44, 0x9d, 0xc8, 0xb5, 0xe4, 0x92, 0x1c, 0xfa, 0x3d, 0xfb, 0x71, 0x6a, 0xfd, 0x71, 0x89,
	0x03, 0x55, 0xd2, 0x36, 0xbd, 0xe9, 0x7d, 0x79, 0xf4, 0x3c, 0x7a, 0xe5, 0x9f, 0x0c, 0x7f, 0x16,
	0x54, 0x2c, 0xab, 0x59, 0x94, 0xb2, 0x55, 0x9c, 0xe0, 0x2b, 0xbc, 0xa6, 0x9b, 0x2a, 0x26, 0x39,
	0xe6, 0x82, 0xa6, 0x9c, 0xe0, 0x32, 0x5d, 0xc6, 0xbc, 0xbc, 0x89, 0x8b, 0x92, 0x09, 0xb6, 0xd7,
	0x6f, 0x55, 0x91, 0x52, 0xa0, 0x60, 0xc1, 0xa2, 0x15, 0x4d, 0x4b, 0x16, 0xd5, 0xbb, 0xa2, 0x96,
	0x22, 0xfc, 0x0e, 0xee, 0x94, 0xa5, 0x09, 0x99, 0xa3, 0x0f, 0xd0, 0xa7, 0xeb, 0x8c, 0x6c, 0xfc,
	0xce, 0xa7, 0xce, 0xf8, 0x6d, 0xa2, 0x0b, 0x84, 0xc0, 0x11, 0xdb, 0x82, 0xf8, 0x5d, 0xd5, 0x54,
	0x6b, 0x34, 0x84, 0x2e, 0xcd, 0xfc, 0x9e, 0xea, 0xd4, 0xab, 0xf0, 0x02, 0xbc, 0x1f, 0x25, 0xc1,
	0x82, 0x24, 0xe4, 0xba, 0x22, 0x5c, 0x3c, 0xdf, 0x4a, 0x6a, 0x32, 0x2c, 0xb0, 0xef, 0x68, 0x8d,
	0x5c, 0x87, 0xef, 0x61, 0xd8, 0xd8, 0xf3, 0x82, 0xad, 0x39, 0x09, 0x7f, 0xc1, 0xbb, 0x84, 0xe0,
	0xec, 0xc5, 0x71, 0xe1, 0x67, 0x18, 0x68, 0x23, 0x6d, 0x8c, 0x3e, 0x82, 0x5b, 0x12, 0x5e, 0xe5,
	0xc2, 0x58, 0x99, 0x4a, 0x4e, 0x78, 0x56, 0x64, 0xaf, 0x39, 0x61, 0x63, 0x6f, 0x26, 0xfc, 0x0d,
	0xde, 0x94, 0xe4, 0xe4, 0x04, 0x81, 0xd2, 0xbc, 0xb1, 0x32, 0xe6, 0xb7, 0xe0, 0xfd, 0x57, 0x5f,
	0xff, 0xe9, 0xe6, 0xb5, 0xb2, 0xde, 0x52, 0x6e, 0x8d, 0xbf, 0x2e, 0x64, 0x37, 0xa7, 0x2b, 0x2a,
	0xd4, 0x50, 0xbd, 0x44, 0x17, 0xf2, 0x32, 0xd9, 0x7c, 0xce, 0x89, 0xf0, 0xfb, 0xaa, 0x6d, 0xaa,
	0x70, 0x0c, 0xc3, 0x26, 0xfe, 0xc0, 0xb5, 0xff, 0x85, 0xc1, 0x3f, 0x19, 0x70, 0xa2, 0x73, 0x86,
	0x23, 0xf0, 0x8c, 0x9f, 0x3d, 0xf8, 0xeb, 0x9d, 0x03, 0xde, 0xcf, 0xdd, 0x77, 0x82, 0x30, 0xb8,
	0x1a, 0x42, 0x34, 0x89, 0x1e, 0x7f, 0x4e, 0x51, 0xeb, 0x1d, 0x04, 0x5f, 0x8e, 0x91, 0x9a, 0x8f,
	0xf2, 0x06, 0x9d, 0x83, 0x23, 0x61, 0x44, 0x23, 0xdb, 0xae, 0x1d, 0xee, 0x83, 0xf1, 0x61, 0xe1,
	0x83, 0x79, 0x7d, 0x7e, 0x8d, 0x98, 0xfd, 0xfc, 0x2d, 0xca, 0xed, 0xe7, 0xdf, 0x23, 0x56, 0x45,
	0x68, 0xd0, 0xec, 0x11, 0x2d, 0xae, 0xed, 0x11, 0x7b, 0xdc, 0xaa, 0x08, 0x8d, 0x8e, 0x3d, 0xa2,
	0x45, 0xb7, 0x3d, 0xa2, 0x4d, 0x62, 0x1d, 0x71, 0x09, 0x7d, 0xc5, 0x08, 0xb2, 0xde, 0xee, 0x2e,
	0x96, 0xc1, 0xe4, 0x08, 0x65, 0xe3, 0x3f, 0x73, 0xd5, 0x3f, 0xf9, 0xdb, 0x7d, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x01, 0xfc, 0x54, 0x6c, 0xe4, 0x05, 0x00, 0x00,
}
